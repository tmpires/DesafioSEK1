public class Motor {

	final private int RAIO_RODA = 3;
	final private int RAIO_ROBO = 24;
	// Variável numeroDeVoltas diz quanto as rodas precisarão girar para que o
	// robo vire 90 graus
	private int numeroDeVoltas = RAIO_ROBO / (4 * RAIO_RODA);
	private boolean ligado;
	final private int perimetro = 3 * 2 * RAIO_RODA;
	private int tacometro = 0;
	private boolean frente;

	public void PercorrerDistancia() {
		Thread thPercorrerDistancia = new Thread(new Runnable() {
			// Logica a ser executada
			public void run() {
				// Quando as funções VirarEsquerda e VirarDireita forem chamadas elas colocam PermitidoVirar = true
				if (Navegacao.PermitidoVirar) {
					for (int i = 0; i < numeroDeVoltas; i++) {
						if (frente == true)
							tacometro++;
						else
							tacometro--;
					}
				}// fim if
					// Quando PermitidoVirar for falso ele anda enquanto while estiver ligado
				else {
					try {
						while (ligado == true) {
							if (frente == true)
								tacometro++;
							else
								tacometro--;
							Thread.sleep(2000);
						}
					} catch (Exception e) {
					}
				}
			}

		});

		// Inicia a thread
		thPercorrerDistancia.start();
	}

	public int getPercorrerDistancia() {
		return tacometro;
	}

	public void Andar() {
		ligado = true;
		frente = true;
		PercorrerDistancia();
	}

	public void Re() {
		ligado = true;
		frente = false;
		PercorrerDistancia();
	}

	public void Parar() {
		ligado = false;
		tacometro = 0;
	}

	public int GetDistanciaPercorrida() {
		return tacometro * perimetro;
	}

	public int GetPerimetro() {
		return perimetro;
	}
}
