public class Navegacao {
	public static boolean PermitidoVirar = false;
// Desviar() traça uma trajetoria de desvio retangular
	public void Desviar() {
		System.out.println("O robo começou a desviar...");
		VirarEsquerda();
		Main.motorDireito.Andar();
		Main.motorEsquerdo.Andar();
		Delay(500);
		Main.motorDireito.Parar();
		Main.motorEsquerdo.Parar();
		Delay(500);

		VirarDireita();
		Main.motorDireito.Andar();
		Main.motorEsquerdo.Andar();
		Delay(500);
		Main.motorDireito.Parar();
		Main.motorEsquerdo.Parar();
		Delay(500);

		VirarDireita();
		Main.motorDireito.Andar();
		Main.motorEsquerdo.Andar();
		Delay(500);
		Main.motorDireito.Parar();
		Main.motorEsquerdo.Parar();
		Delay(500);

		VirarEsquerda();
		Main.motorDireito.Andar();
		Main.motorEsquerdo.Andar();
		Delay(500);
		Main.motorDireito.Parar();
		Main.motorEsquerdo.Parar();
		Delay(500);
		System.out.println("O robo desviou do obstáculo!");
	}

	// Faz o Robo girar 90 graus a direita
	public static void VirarDireita() {
		PermitidoVirar = true;
		Main.motorDireito.Re();
		Main.motorEsquerdo.Andar();
		PermitidoVirar = false;
		Delay(1000);

	}

	// Faz o Robo girar 90 graus a esquerda
	public static void VirarEsquerda() {
		PermitidoVirar = true;
		Main.motorDireito.Andar();
		Main.motorEsquerdo.Re();
		PermitidoVirar = false;
		Delay(1000);
	}

	// Recebe um valor de tempo em milisegundos para fazer uma pausa na execução

	public static void Delay(int tempo) {
		try {
			Thread.sleep(tempo);
		} catch (Exception e) {
		}
	}
}
